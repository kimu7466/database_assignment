create database assessment;

use assessment;

CREATE TABLE product (
    PRO_ID INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PRO_NAME varchar(255),
    PRO_PRICE float,
    PRO_CODE int
) AUTO_INCREMENT=101;

INSERT INTO product (PRO_NAME, PRO_PRICE, PRO_CODE) 
VALUES 
('Mother Board', 3200 , 15),
('Key Board', 450 , 16),
('zip Drive', 250 , 14),
('Speaker', 550 , 16),
('Moniter', 5000 , 11),
('DVD Drive', 900 , 12),
('CD Drive', 800, 12),
('Printer', 2600 , 13),
('Refill cartridge', 350 , 13),
('mouse', 250 , 12);

select * from product;

+--------+------------------+-----------+----------+
| PRO_ID | PRO_NAME         | PRO_PRICE | PRO_CODE |
+--------+------------------+-----------+----------+
|    101 | Mother Board     |      3200 |       15 |
|    102 | Key Board        |       450 |       16 |
|    103 | zip Drive        |       250 |       14 |
|    104 | Speaker          |       550 |       16 |
|    105 | Moniter          |      5000 |       11 |
|    106 | DVD Drive        |       900 |       12 |
|    107 | CD Drive         |       800 |       12 |
|    108 | Printer          |      2600 |       13 |
|    109 | Refill cartridge |       350 |       13 |
|    110 | mouse            |       250 |       12 |
+--------+------------------+-----------+----------+


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

a. Write sql query to find the items whose prices are higher than or equal 250rs.
Order the result by product price in descending, then product name in
ascending. Return pro_name and pro_price.

select pro_price , pro_name
from product
where PRO_PRICE>=250
order by PRO_PRICE desc,
PRO_NAME ;

+-----------+------------------+
| pro_price | pro_name         |
+-----------+------------------+
|      5000 | Moniter          |
|      3200 | Mother Board     |
|      2600 | Printer          |
|       900 | DVD Drive        |
|       800 | CD Drive         |
|       550 | Speaker          |
|       450 | Key Board        |
|       350 | Refill cartridge |
|       250 | mouse            |
|       250 | zip Drive        |
+-----------+------------------+
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
b. Write a sql query to find the cheapest item. Return pro_name and pro_price.

SELECT PRO_NAME, PRO_PRICE
FROM product
ORDER BY PRO_PRICE
LIMIT 1;

+-----------+-----------+
| PRO_NAME  | PRO_PRICE |
+-----------+-----------+
| zip Drive |       250 |
+-----------+-----------+

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
c. Write the sql query to calculate the average price of the items for each
company. Return average price and company code.

SELECT PRO_CODE, AVG(PRO_PRICE) AS average_price
FROM product
GROUP BY PRO_CODE;


+----------+---------------+
| PRO_CODE | average_price |
+----------+---------------+
|       15 |          3200 |
|       16 |           500 |
|       14 |           250 |
|       11 |          5000 |
|       12 |           650 |
|       13 |          1475 |
+----------+---------------+
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

d. Write the sql query to find the average total for all the product mention in the
table

SELECT AVG(PRO_PRICE) AS average_total
FROM product;

+---------------+
| average_total |
+---------------+
|          1435 |
+---------------+